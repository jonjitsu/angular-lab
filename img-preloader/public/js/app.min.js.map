{"version":3,"sources":["app.js"],"names":["emacs","what","msg","console","log","arguments","l","bind","urls","ImageLoader","undefined","VERSION","loadImage","url","Promise","onFulfilled","onRejected","img","Image","resolver","onComplete","apply","this","onerror","onload","src","loadImages","options","urlsToPromises","map","all","api","version","angular","module","factory","directive","imgLoader","restrict","link","scope","element","attrs","fallbackImageUrl","ngSrc","hide","then","$set","show"],"mappings":"AACA,YAGA,IAAAA,OAAA,KACAC,KAAA,SAAAC,GACA,MAAA,YACAC,QAAAC,IAAAF,EAAAG,UAAA,MAGAC,EAAAH,QAAAC,IAAAG,KAAAJ,SACAK,MACA,kCACA,kEAEAC,YAAA,SAAAC,GACA,GAAAC,GAAA,QACAC,EAAA,SAAAC,GACA,MAAA,IAAAC,SAAA,SAAAC,EAAAC,GACA,GAAAC,GAAA,GAAAC,OACAC,EAAA,SAAAC,GACA,MAAA,YACAH,EAAA,OACAG,EAAAC,MAAAC,KAAAjB,YAGAY,GAAAM,QAAAJ,EAAAH,GACAC,EAAAO,OAAAL,EAAAJ,GACAE,EAAAQ,IAAAZ,KAIAa,EAAA,SAAAlB,EAAAmB,GAEA,GAAAC,GAAA,SAAApB,GACA,MAAAA,GAAAqB,IAAA,SAAAhB,GACA,MAAAD,GAAAC,KAGA,OAAAC,SAAAgB,IAAAF,EAAApB,KAYAuB,GACAC,QAAArB,EACAC,UAAAA,EACAc,WAAAA,EAGA,OAAAK,KAGAE,SACAC,OAAA,cACAC,QAAA,YAAA,WACA,MAAA1B,eAEA2B,UAAA,WAAA,YAAA,SAAAC,GACA,OACAC,SAAA,IACAC,KAAA,SAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAAD,EAAAC,iBACA9B,EAAA6B,EAAAE,KAEAtC,GAAAO,GACA4B,EAAAI,OACAR,EACAzB,UAAAC,GACAiC,KAAA,WACAJ,EAAAK,KAAA,MAAAlC,GACA4B,EAAAO,QACA,WACAtC,SAAAiC,IACAD,EAAAK,KAAA,MAAAJ,GACAF,EAAAO","file":"app.min.js","sourcesContent":["/*eslint-disable no-alert, no-console, no-undef, no-unused-vars */\n'use strict';\n\n\nvar emacs=':(',\n    what = function(msg) {\n        return function() {\n            console.log(msg, arguments[0]);\n        };\n    },\n    l = console.log.bind(console),\n    urls = [\n        'http://lorempixel.com/g/400/200',\n        'http://25.media.tumblr.com/tumblr_m31bisr9Tl1qejbiro1_1280.jpg'\n    ],\n    ImageLoader = (function(undefined) {\n        var VERSION='0.2.0',\n            loadImage = function(url) {\n                return new Promise(function(onFulfilled, onRejected) {\n                    var img = new Image(),\n                        resolver = function(onComplete) {\n                            return function() {\n                            img = void 0;\n                                onComplete.apply(this, arguments);\n                            };\n                        };\n                    img.onerror = resolver(onRejected);\n                    img.onload  = resolver(onFulfilled);\n                    img.src     = url;\n                    //setTimeout(function() { img.src = url; }, 2000);\n                });\n            },\n            loadImages = function(urls, options) {\n                // simple, no options\n                var urlsToPromises = function(urls) {\n                   return urls.map(function(url) {\n                       return loadImage(url);\n                   });\n                };\n                return Promise.all(urlsToPromises(urls));\n                // not sure if we can do better queuing than the browser.\n                // add to queue\n                // start loader if not already started\n                var queue = urls.slice(),\n                    p = new Promise(function(onFulfilled, onRejected) {\n                        \n                    })\n                ;\n\n                return p;\n            },\n            api = {\n                version: VERSION,\n                loadImage: loadImage,\n                loadImages: loadImages\n            }\n        ;\n        return api;\n    })();\n\nangular\n    .module('testapp', [])\n    .factory('imgLoader', function() {\n        return ImageLoader;\n    })\n    .directive('preload', ['imgLoader', function(imgLoader) {\n        return {\n            restrict: 'A',\n            link: function(scope, element, attrs) {\n                var fallbackImageUrl = attrs.fallbackImageUrl,\n                    url = attrs.ngSrc\n                ;\n                l(url);\n                element.hide();\n                imgLoader\n                    .loadImage(url)\n                    .then(function() {\n                        attrs.$set('src', url);\n                        element.show();                        \n                    }, function() {\n                        if (fallbackImageUrl!==undefined) { \n                            attrs.$set('src', fallbackImageUrl);\n                            element.show();\n                        }\n                    });\n            }\n        };\n    }])\n"],"sourceRoot":"/source/"}